configfile: 'config.yaml'

def get_sample_path(wildcards):
    return config['samples'][wildcards.sample]

rule all:
    input:
        'results/variants.tsv'

rule bwa_map_gen:
    input:
        config['genome_in'],
        get_sample_path
    output:
        temp('results/{sample}.bam')
    threads:
        config['thread_bwa']
    log:
        'logs/{sample}_bwa_map.log'
    benchmark:
        'benchmarks/{sample}_bwa_map.txt'
    shell:
        'bwa mem -t {threads} {input} | samtools view -b > {output} 2>{log}'

rule sort_bam:
    input:
        rules.bwa_map_gen.output
    output:
        'results/{sample}.sorted.bam'
    log:
        'logs/{sample}_sort.log'
    benchmark:
        'benchmarks/{sample}_sort.txt'
    shell:
        'samtools sort -O bam {input} > {output} 2>{log}'

rule samtools_idx:
    input:
        rules.sort_bam.output
    output:
        'results/{sample}.sorted.bam.bai'
    log:
        'logs/{sample}_samtools_idx.log'
    benchmark:
        'benchmarks/{sample}_samtools_idx.txt'
    shell:
        'samtools index {input} 2>{log}'

# rule bcftools:
#     input:
#         genome = 'data/genome.fa',
#         aln_idx = expand('results/{sample}.sorted.bam.bai', sample=samples),
#         aln = expand('results/{sample}.sorted.bam', sample=samples)
#     output:
#         'results/variants.vcf'
#     shell:
#         'bcftools mpileup -f {input.genome} {input.aln} | bcftools call -mv - > {output}'

rule bcftools:
    input:
        genome = config['genome_in'],
        aln_idx = expand('results/{sample}.sorted.bam.bai', sample=config["samples"]),
        aln = expand('results/{sample}.sorted.bam', sample=config["samples"])
    output:
        'results/variants.vcf'
    params:
        subrate = config['subrate_bcftools']
    log:
        'logs/bcftools.log'
    benchmark:
        'benchmarks/bcftools.txt'
    shell:
        'bcftools mpileup -f {input.genome} {input.aln} | bcftools call -P {params.subrate} -mv - > {output} 2>{log}'

rule parse_bcftools:
    input:
        rules.bcftools.output
    output:
        'results/variants.tsv'
    script:
        'create_substitution_table.py'

